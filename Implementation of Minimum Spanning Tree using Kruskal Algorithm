#include <stdio.h>
#include <stdlib.h>

typedef struct { int u, v, w; } Edge;

int findSet(int parent[], int i) {
    return (parent[i] == i) ? i : (parent[i] = findSet(parent, parent[i]));
}

void unionSet(int parent[], int rank[], int x, int y) {
    x = findSet(parent, x);
    y = findSet(parent, y);
    if (rank[x] < rank[y]) parent[x] = y;
    else if (rank[x] > rank[y]) parent[y] = x;
    else { parent[y] = x; rank[x]++; }
}

int cmp(const void* a, const void* b) {
    return ((Edge*)a)->w - ((Edge*)b)->w;
}
void kruskal(Edge edges[], int E, int V) {
    qsort(edges, E, sizeof(Edge), cmp);
    int parent[V], rank[V];
    for (int i = 0; i < V; i++) parent[i] = i, rank[i] = 0;
  printf("Edges in MST:\n");
    for (int i = 0; i < E; i++) {
        int u = findSet(parent, edges[i].u);
        int v = findSet(parent, edges[i].v);
        if (u != v) {
            printf("%d -- %d == %d\n", edges[i].u, edges[i].v, edges[i].w);
            unionSet(parent, rank, u, v);
        }
    }
}
int main() {
    int V = 4, E = 5;
    Edge edges[] = {
        {0,1,10},{0,2,6},{0,3,5},{1,3,15},{2,3,4}
    };
    kruskal(edges, E, V);
    return 0;
}
